import logging
import aiohttp
from datbase import Session
from datbase import Element
from telegram.ext import Application
from telegram.ext import MessageHandler
from telegram.ext import filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import ConversationHandler
from T_IASS import BOT_TOKEN

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/help', '/map'],
                  ['/info', '/applicationto']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

"""START:"""


# start:
async def start(update, context):
    user = update.effective_user
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üëãüèΩ\n"
        "üåø –Ø telegram-–±–æ—Ç –æ—Ç High Life, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ...\n"
        "üöÄ –õ–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –ú–µ–∂–¥–Ω–∞—Ä–æ–¥–Ω—É—é –ê—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫—É—é –®–∫–æ–ª—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.\n"
        "üìë –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?) –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /applicationto.\n"
        "‚Ñπ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ú–ê–ö–®, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /info.\n"
        "üìç –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ú–ê–ö–® –Ω–∞ –∫–∞—Ä—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /map.\n"
        "‚ùóÔ∏è–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!\n"
        "üö´ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è\n"
        "‚òÅ –ü–µ—Ä–µ–¥ –∑–∞—è–≤–∫–æ–π –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫ —Å –≤–∞—à–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞ –∏ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
        reply_markup=markup
    )


# help:
async def helper(update, context):
    await update.message.reply_text(
        "üöÄ –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /applicationto.\n"
        "‚Ñπ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ú–ê–ö–®, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /info.\n"
        "üìç –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ú–ê–ö–® –Ω–∞ –∫–∞—Ä—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /map.\n"
        "‚ùóÔ∏è–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!\n"
        "üö´ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è\n"
        "‚òÅ –ü–µ—Ä–µ–¥ –∑–∞—è–≤–∫–æ–π –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫ —Å –≤–∞—à–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞ –∏ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"
    )


# info:
async def info(update, context):
    await context.bot.send_photo(
        update.message.chat_id,
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
        "https://m.vk.com/photo-185042892_457240055",
        caption="üöÄ –ú–ê–ö–® - —ç—Ç–æ –º–æ–ª–æ–¥—ë–∂–Ω—ã–π –ª–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å-—à–∫–æ–ª–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n"
                "üî• –ú–ê–ö–® —Å–æ–∑–¥–∞–Ω–∞ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –¥–µ–ø—É—Ç–∞—Ç–∞ –í—è—á–µ—Å–ª–∞–≤–∞ –í–∞—Å–∏–ª—å–µ–≤–∏—á–∞ –ê–±—Ä–æ—â–µ–Ω–∫–æ –≤ 2010 –≥–æ–¥—É.\n"
                "üìç –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∞–≥–µ—Ä—å –≤ –¥. –ö–∞–ª–∏–Ω–æ–≤–∫–∞ –î–∞–≤–ª–µ–∫–∞–Ω–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –†–ë.‚ù§–¢–∞–º –¥–µ—Ç–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —É—á–∞—Å—Ç–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö \n"
                "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, —Å–ª—É—à–∞—é—Ç –ª–µ–∫—Ü–∏–∏ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤, –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —É—á—ë–Ω—ã—Ö, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π,\n"
                "–≥–µ—Ä–æ–µ–≤ –°–°–°–† –∏ –†–§, –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –∑–¥–æ—Ä–æ–≤—É—é –ø–∏—â—É –∏ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º.\n"
                "üòé –¢—É–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –¥–µ—Ç–∏ —Å–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏, –∏ –¥–∞–∂–µ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞. üí∏ –£—á–∞—Å—Ç–∏–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ!",
    )


"""GEO:"""


# ll&spn:
def get_ll_spn(toponym):
    ll = list(map(lambda x: str(x), toponym["Point"]["pos"].split()))
    lowercorner = list(map(lambda x: float(x), toponym["boundedBy"]["Envelope"]["lowerCorner"].split()))
    uppercorner = list(map(lambda x: float(x), toponym["boundedBy"]["Envelope"]["upperCorner"].split()))
    spn = list(map(lambda x: str(x), [uppercorner[0] - lowercorner[0], uppercorner[1] - lowercorner[1]]))
    return ll, spn


# response:
async def get_response(url, params):
    logger.info(f"getting {url}")
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            return await resp.json()


# result:
async def geocoder(update, context):
    geocoder_uri = "http://geocode-maps.yandex.ru/1.x/"
    response = await get_response(geocoder_uri, params={
        "apikey": "40d1649f-0493-4b70-98ba-98533de7710b",
        "format": "json",
        "geocode": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω, –î–∞–≤–ª–µ–∫–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¥–µ—Ä–µ–≤–Ω—è –ö–∞–ª–∏–Ω–æ–≤–∫–∞"
    }
                                  )

    toponym = response["response"]["GeoObjectCollection"][
        "featureMember"][0]["GeoObject"]
    ll, spn = get_ll_spn(toponym)
    ll = ','.join(ll)
    spn = ','.join(spn)

    static_api_request = f"http://static-maps.yandex.ru/1.x/?ll={ll}&spn={spn}&l=map"
    await context.bot.send_photo(
        update.message.chat_id,
        # –°—Å—ã–ª–∫–∞ –Ω–∞ static API.
        static_api_request,
        caption="–ú—ã –∑–¥–µ—Å—å ‚ù§:"
    )


"""APPLICATION"""

# —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
elements = []


# application:
async def applicationto(update, context):
    await update.message.reply_text(
        "üöÄ –ü–æ–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ –ú–ê–ö–®!)\n"
        "üõë —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
        "‚ùó –ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è. –ù–µ –ø–æ–¥–∞–≤–∞–π—Ç–µ –µ—ë 2 –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑–∞!\n"
        "üìù –ù–∞–ø–∏—à–∏ –§–ò–û",
        reply_markup=ReplyKeyboardRemove()
    )

    return 1


# name:
async def l_f_p(update, context):
    name = update.message.text
    logger.info(name)
    global elements
    elements = [name]
    await update.message.reply_text(
        f"–§–ò–û: {name}\n"
        "üë¶üèΩ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
    )

    return 2


# age:
async def age(update, context):
    ager = update.message.text
    logger.info(ager)
    global elements
    elements.append(ager)
    await update.message.reply_text(
        f"–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {ager}\n"
        "üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )

    return 3


# phone:
async def phone(update, context):
    phon = update.message.text
    logger.info(phon)
    global elements
    elements.append(phon)
    await update.message.reply_text(
        f"–¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phon}\n"
        "üíå –í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É"
    )

    return 4


# e-mail:
async def e_mail(update, context):
    mail = update.message.text
    logger.info(mail)
    global elements
    elements.append(mail)
    await update.message.reply_text(
        f"–¢–≤–æ—è –ø–æ—á—Ç–∞: {mail}\n"
        "‚ù§ –ö–∞–∫ –∑–æ–≤—É—Ç —Ä–æ–¥–∏—Ç–µ–ª—è? (–§–ò–û)"
    )

    return 5


# –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:
async def parents_l_f_p(update, context):
    plfp = update.message.text
    logger.info(plfp)
    global elements
    elements.append(plfp)
    await update.message.reply_text(
        f"–†–æ–¥–∏—Ç–µ–ª—å: {plfp}\n"
        "‚òé –ö–∞–∫–æ–π —É –Ω–µ–≥–æ –Ω–æ–º–µ—Ä?"
    )

    return 6


# —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:
async def parents_phone(update, context):
    pphone = update.message.text
    logger.info(pphone)
    global elements
    elements.append(pphone)
    await update.message.reply_text(
        f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {pphone}\n"
        "üìß –ê –ø–æ—á—Ç–∞?"
    )

    return 7


# –ø–æ—á—Ç–∞ —Ä–æ–¥—Ç–µ–ª—è:
async def parents_mail(update, context):
    pmail = update.message.text
    logger.info(pmail)
    global elements
    elements.append(pmail)
    await update.message.reply_text(
        f"–ü–æ—á—Ç–∞ —Ä–æ–¥–∏—Ç–µ–ª—è: {pmail}\n"
        "‚òÅ –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫ —Å–æ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"
    )

    return 8


# —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏—Å–∫ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ :
async def linker(update, context):
    link = update.message.text
    logger.info(link)
    global elements
    elements.append(link)
    await update.message.reply_text(
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ: {link}\n"
        "üöÄ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–±–µ –ø–æ–∑–≤–∞–Ω—è—Ç –∏–ª–∏ –Ω–∞–ø–∏—à—É—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã)! üíó",
        reply_markup=markup
    )

    session = Session()
    elements = [i.strip() for i in elements]
    element_name = elements[0]
    element_age = elements[1]
    element_phone = elements[2]
    element_e_mail = elements[3]
    element_parent = elements[4]
    element_parent_phone = elements[5]
    element_parent_e_mail = elements[6]
    element_achivements = elements[7]
    res = Element(name=element_name, age=element_age, phone=element_phone, e_mail=element_e_mail, parent=element_parent,
                  parent_phone=element_parent_phone, parent_e_mail=element_parent_e_mail,
                  achivements=element_achivements)
    session.add(res)
    '''element1 = Element(
        name=element_name.strip(),
        age=element_age.strip(),
        phone=element_phone.strip(),
        e_mail=element_e_mail.strip(),
        parent=element_parent.strip(),
        parent_phone=element_parent_phone.strip(),
        parent_e_mail=element_parent_e_mail.strip(),
        achivements=element_achivements.strip()
    )
    session.add(element1)'''

    session.commit()
    session.close()
    elements.clear()

    return ConversationHandler.END


# stop:
async def stop(update, context):
    global elements
    elements.clear()
    await update.message.reply_text(
        "–°–¥–µ–ª–∞–µ–º –ø–æ–∑–∂–µ)",
        reply_markup=markup
    )

    return ConversationHandler.END


# handler:
conv_handler = ConversationHandler(
    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
    entry_points=[
        CommandHandler(
            'applicationto',
            applicationto
        )
    ],

    states={
        1: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            l_f_p
        )
        ],
        2: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            age
        )
        ],
        3: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            phone
        )
        ],
        4: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            e_mail
        )
        ],
        5: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            parents_l_f_p
        )
        ],
        6: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            parents_phone
        )
        ],
        7: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            parents_mail
        )
        ],
        8: [MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            linker
        )
        ],
    },

    # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
    fallbacks=[
        CommandHandler(
            'stop',
            stop
        )
    ]
)

"""ADDITIONALLY"""


# pics:
async def pics(update, context):
    await context.bot.sendMediaGroup(
        update.message.chat_id,
        [
            "https://m.vk.com/photo-185042892_457240065?list=photos-185042892",
            "https://m.vk.com/photo-185042892_457240063?list=photos-185042892",
            "https://m.vk.com/photo-185042892_457240060?list=photos-185042892",
            "https://m.vk.com/photo-185042892_457239996?list=photos-185042892"
        ]
    )


# main block:
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", helper))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("map", geocoder))
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
